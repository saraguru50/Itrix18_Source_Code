Source Code Prelims Solutions:

---------------------------------------------------------------------------------------------------------------------------------

Web Challenges:


1.   c)    <!--     -->



2.   hi



3.   array 1: length=5 last=j,o,n,e,s
      array 2: length=5 last=j,o,n,e,s



4.   456



5.    PHPCODE



6.
	<script>

       function func() {

		var text = document.getElementById("t1").value;
		
		document.getElementById("p").innerHTML = text;

       }
 
            </script>


7.
	sample.php

	<?php

		$s = $_GET['name'];

		$ans = "";

		for($i=0;$i<strlen($s);$i++) {
			$c = ord($s[$i]);
			$ch = $c - 32;
			$ans .= chr($ch);
		}

		echo $ans;


	?>

	<script>

	function func() {

		var text = document.getElementById("p").innerHTML;

		var xhttp = new XMLHttpRequest();
  		xhttp.onreadystatechange = function() {
    			if (this.readyState == 4 && this.status == 200) {
      				document.getElementById("p").innerHTML = this.responseText;
    			}
  		};
  		xhttp.open("GET","sample2.php?name="+text, true);
  		xhttp.send();

     	}

	</script>

---------------------------------------------------------------------------------------------------------------------------------

			
Algorithm Challenges:

1) No of 1â€™s present in the binary representation of the number

2) c) Both iii) and iv)

3) Undirected Graph:

int n,m;
bool found;
bool vis[100005];
vector<int>v[100005];
void dfs(int node,int par=-1) {
	if(!vis[node]) {
		vis[node] = true;
		int i;
		for(i=0;i<v[node].size();i++) {
			if(!vis[v[node][i]]) {
				dfs(v[node][i],node);}
			else if(v[node][i] != node) {
				found = true;}
		}	
	}
}
4)
	int a[1005][1005],dp[1005][1005],n,m,i,j;
	dp[1][1] = a[1][1];
	for(i=2;i<=m;i++) {
		dp[1][i] = dp[1][i - 1] + a[1][i];
	}
	for(i=2;i<=n;i++) {
		dp[i][1] = dp[i - 1][1] + a[i][1];
	}
	for(i=2;i<=n;i++) {
		for(j=2;j<=m;j++) {
			dp[i][j] = max(dp[i - 1][j] + dp[i][j - 1]) + a[i][j];
		}
	}
	cout << dp[n][m] << "\n";

5)

void dfs(long long node) {

    if(!vis[node]) {
        vis[node] = true;
        v1.push_back(pos[node]); v2.push_back(node);
        long long i;
        for(i=0;i<v[node].size();i++) {
            if(!vis[v[node][i]]) {
                dfs(v[node][i]);
            }
        }
    }


}
int main(){
 for(i=1;i<=n;i++) {
        if(!vis[i]) {
            v1.clear(); v2.clear(); dfs(i);
            sort(v1.begin(),v1.end(),greater<long long>()); 					sort(v2.begin(),v2.end());
            for(j=0;j<v2.size();j++) {
                a[v2[j]] = v1[j];
            }
        }
    }
}


6) 0 8

7) Hello All Geeks 11

8) Remove every kth node from the linked list:

Node *deleteKthNode(struct Node *head, int k)
{
	if (head == NULL)
		return NULL;
	if (k == 1)
	{
		freeList(head);
		return NULL;
	}
	struct Node *ptr = head, *prev = NULL;
	int count = 0;
	while (ptr != NULL)
	{
	count++;
	if (k == count)
		{
		delete(prev->next);
		prev->next = ptr->next;
		count = 0;
		}

		if (count != 0)
		prev = ptr;
	ptr = prev->next;
	}
return head;
}


9) Diameter of a binary tree:

int height(Node* root, int& ans)
{
	if (root == NULL)
		return 0;
	int left_height = height(root->left, ans);
	int right_height = height(root->right, ans);
	ans = max(ans, 1 + left_height + right_height);
	return 1 + max(left_height, right_height);
}
int diameter(Node* root)
{
	if (root == NULL)
		return 0;
	int ans = INT_MIN;
	int height_of_tree = height(root, ans);
	return ans;
}


10) Maximum 2D array sum:


int kadane(int* arr, int n)
{

	int sum = 0, maxSum = INT_MIN, i,finish=-1;
	for (i = 0; i < n; i++)
	{
		sum += arr[i];
		if (sum < 0)
		{
			sum = 0;
		}
		else if (sum > maxSum)
		{
			finish = 1;
			maxSum = sum;
		}
	}
	if (finish != -1)
		return maxSum;
		
	maxSum = arr[0];
	for (i = 1; i < n; i++)
	{
		if (arr[i] > maxSum)
		{
			maxSum = arr[i];
		}
	}
	return maxSum;
}
void findMaxSum(int M[][COL])
{
	int maxSum = INT_MIN;

	int left, right, i;
	int temp[ROW], sum;
	for (left = 0; left < COL; ++left)
	{
		memset(temp, 0, sizeof(temp));
		for (right = left; right < COL; ++right)
		{
			for (i = 0; i < ROW; ++i)
				temp[i] += M[i][right];
			sum = kadane(temp, ROW);
			if (sum > maxSum)
			{
				maxSum = sum;
			}
		}
	}
	printf("Max sum is: %dn", maxSum);
}


11) int a[26]={0},i,len,ans=0;
	string s;
	cin >> s;
	len = s.length();
	for(i=0;i<len;i++) {
		a[s[i]-'a']++;
	}
	ans = a[0];
	for(i=1;i<26;i++) {
		ans = ans ^ a[i];
	}
	if(ans == 0) cout << "Player B wins the game\n";
	else cout << "Player A wins the game\n";
